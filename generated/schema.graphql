### This file was generated by Nexus Schema
### Do not make changes to this file directly

input BooleanFilter {
    equals: Boolean
    not: Boolean
}

type Category {
    id: Int!
    name: String!
    postCount: Int!
    posts(
        after: PostWhereUniqueInput
        before: PostWhereUniqueInput
        first: Int
        last: Int
    ): [Post!]!
    slug: String!
}

input CategoryFilter {
    every: CategoryWhereInput
    none: CategoryWhereInput
    some: CategoryWhereInput
}

input CategoryWhereInput {
    AND: [CategoryWhereInput!]
    id: IntFilter
    name: StringFilter
    NOT: [CategoryWhereInput!]
    OR: [CategoryWhereInput!]
    posts: PostFilter
    slug: StringFilter
}

input CategoryWhereUniqueInput {
    id: Int
    name: String
    slug: String
}

scalar DateTime

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: DateTime
    notIn: [DateTime!]
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

input NullableIntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

input NullableStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

enum OrderByArg {
    asc
    desc
}

type Post {
    author: User
    categories(
        after: CategoryWhereUniqueInput
        before: CategoryWhereUniqueInput
        first: Int
        last: Int
    ): [Category!]!
    content: String
    createdAt: DateTime!
    draft: Boolean!
    excerpt: String
    id: Int!
    slug: String!
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
    ): [Tag!]!
    title: String!
    updatedAt: DateTime!
}

input PostFilter {
    every: PostWhereInput
    none: PostWhereInput
    some: PostWhereInput
}

input PostWhereInput {
    AND: [PostWhereInput!]
    author: UserWhereInput
    authorId: NullableIntFilter
    categories: CategoryFilter
    content: NullableStringFilter
    createdAt: DateTimeFilter
    draft: BooleanFilter
    excerpt: NullableStringFilter
    id: IntFilter
    NOT: [PostWhereInput!]
    OR: [PostWhereInput!]
    slug: StringFilter
    source: StringFilter
    tags: TagFilter
    title: StringFilter
    updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
    id: Int
    slug: String
    title: String
}

type Query {
    categories(
        after: CategoryWhereUniqueInput
        before: CategoryWhereUniqueInput
        first: Int
        last: Int
    ): [Category!]!
    category(where: CategoryWhereUniqueInput!): Category
    post(where: PostWhereUniqueInput!): Post
    posts(
        after: PostWhereUniqueInput
        before: PostWhereUniqueInput
        first: Int
        last: Int
        orderBy: QueryPostsOrderByInput
        where: PostWhereInput
    ): [Post!]!
    tag(where: TagWhereUniqueInput!): Tag
    tags(
        after: TagWhereUniqueInput
        before: TagWhereUniqueInput
        first: Int
        last: Int
    ): [Tag!]!
    user(where: UserWhereUniqueInput!): User
}

input QueryPostsOrderByInput {
    updatedAt: OrderByArg
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

type Tag {
    id: Int!
    name: String!
    posts(
        after: PostWhereUniqueInput
        before: PostWhereUniqueInput
        first: Int
        last: Int
    ): [Post!]!
    slug: String!
}

input TagFilter {
    every: TagWhereInput
    none: TagWhereInput
    some: TagWhereInput
}

input TagWhereInput {
    AND: [TagWhereInput!]
    id: IntFilter
    name: StringFilter
    NOT: [TagWhereInput!]
    OR: [TagWhereInput!]
    posts: PostFilter
    slug: StringFilter
}

input TagWhereUniqueInput {
    id: Int
    name: String
    slug: String
}

type User {
    bio: String
    email: String!
    githubId: String
    id: Int!
    name: String
    postCount: Int!
    posts: [Post!]!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    bio: NullableStringFilter
    email: StringFilter
    githubId: NullableStringFilter
    id: IntFilter
    name: NullableStringFilter
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    posts: PostFilter
}

input UserWhereUniqueInput {
    email: String
    id: Int
    name: String
}
