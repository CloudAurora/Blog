
import { SchemaDirectiveVisitor } from 'graphql-tools'
import gql from 'graphql-tag'
import { GraphQLField, defaultFieldResolver, GraphQLString, GraphQLScalarType, Kind, GraphQLObjectType, GraphQLInterfaceType, GraphQLID } from 'graphql'
import moment, { Moment } from 'moment'
import { createHash } from 'crypto';
import { PublicConfig } from './server-config';


export const PRE_DEFS = gql`
directive @date(format: String) on FIELD_DEFINITION
# directive @auth(requires: Role = ADMIN) on OBJECT | FIELD_DEFINITION
directive @hash(
  from: [String] = ["body"]
) on FIELD_DEFINITION

# enum Role {
#   ADMIN
#   AUTHOR
#   USER
# }

scalar Date
`

export const scalars: Record<string, GraphQLScalarType> = {
    Date: new GraphQLScalarType({
        name: 'Date',
        description: 'Date scalar type',
        parseValue(value: string) {
            return moment(value);
        },
        serialize(value: Moment) {
            return value.format(PublicConfig.common.timeFormatter);
        },
        parseLiteral(ast) {
            if (ast.kind === Kind.STRING || ast.kind === Kind.INT) {
                return moment(ast.value);
            }
            return null;
        }
    }),
}

export class FormattableDateDirective extends SchemaDirectiveVisitor {
    public visitFieldDefinition(field: GraphQLField<void, any>) {
        const { resolve = defaultFieldResolver } = field;
        const { format } = this.args;

        field.resolve = async (source, args, context, info) => {
            const date = await resolve(source, args, context, info);
            return moment(date).format(format || PublicConfig.common.timeFormatter);
        };

        field.type = GraphQLString;
    }
}


export class HashDirectiveVisitor extends SchemaDirectiveVisitor {
    public visitFieldDefinition(field: GraphQLField<any, any>) {
        const { from } = this.args;
        field.description = `hash auto generated by ${from.join()}`;
        field.resolve = async (source) => {
            const hash = createHash('sha1');
            hash.update('hash:');
            from.forEach((name: string) => {
                hash.update(String(source[name]));
            });
            return hash.digest("hex");
        }
    }
}

export const directives = {
    date: FormattableDateDirective,
    hash: HashDirectiveVisitor
}